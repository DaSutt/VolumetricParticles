/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#version 450

const int IMAGE_RESOLUTION = 17;
const bool SKIP_PARTICLES = false;

layout(set = 0, binding = 0, rgba16f) uniform image3D imageAtlas_;

layout(set = 0, binding = 1) uniform cbData
{
  float texelSize;
  vec3 padding;
} cb_;

struct NodeData
{
  vec3 gridOffset;  
  int maxParticles;
  int particleOffset;
  uint imageOffset;
  ivec2 padding;
};

layout(set = 0, binding = 2) buffer perNodeBuffer
{
  NodeData data[];
} nodes_;

layout(set = 0, binding = 3) buffer nodeParticleIndiceBuffer
{
  int data[];
} particleIndices_;

struct ParticleData
{
  vec3 gridPos;
  float radiusSquare;
};

layout(set = 0, binding = 4) buffer perParticleBuffer
{
  ParticleData data[];
} particles_;

const uint IMAGE_BIT_OFFSETS[3] = {22, 12, 2};
const uint IMAGE_BIT_MASKS[2] = { 0x3fffff, 0xfff };

ivec3 UnpackImageOffset(uint imageOffset)
{
  return ivec3(
    imageOffset >> IMAGE_BIT_OFFSETS[0],
    (imageOffset & IMAGE_BIT_MASKS[0]) >> IMAGE_BIT_OFFSETS[1],
    (imageOffset & IMAGE_BIT_MASKS[1]) >> IMAGE_BIT_OFFSETS[2]);
}

layout(local_size_x = IMAGE_RESOLUTION, local_size_y = IMAGE_RESOLUTION, local_size_z = 1) in;
void main()
{
  const int nodeIndex = int(gl_WorkGroupID.x);
  const NodeData currNode = nodes_.data[nodeIndex];
   
  //TODO:
  //replace with correct values instead of hardcoded
  float scattering = 0.5;
  float absorption = 0.5;
  float extinction = scattering + absorption;
      
  //loop over all texels of this
  for(int z = 0; z < IMAGE_RESOLUTION; ++z)
  {
    const ivec3 index = ivec3(gl_LocalInvocationID.x, gl_LocalInvocationID.y, z);
    const vec3 gridPos = currNode.gridOffset + cb_.texelSize * index;    
        
    vec4 texValue = vec4(0,0,0,1);
    int particleCount = 0;
    
    //For each particle check if the texel position in grid space is inside the particle radius
    for(int i = 0; i < currNode.maxParticles; ++i)
    {
      const ParticleData particle = particles_.data[particleIndices_.data[i + currNode.particleOffset]];
      
      if(SKIP_PARTICLES) {
        const int particleIndex = 13;
        if(particleIndex != particleIndices_.data[i + currNode.particleOffset])
        {
          continue;
        }
      }
      
      const vec3 distanceVector = gridPos - particle.gridPos;
      
      if(dot(distanceVector, distanceVector) < particle.radiusSquare)
      {
        //TODO handle the adding of phase functions
        texValue += vec4(scattering, extinction, 0.0 ,0.0);
        particleCount++;
      }
    }
    
    if(particleCount > 0)
    {
      //TODO not correct if multiple particles without scattering, phase function value is averaged
      texValue.z /= float(particleCount);
      
      const ivec3 texelCoord = UnpackImageOffset(currNode.imageOffset) + index; 
      //if(index.x == 16 || index.x == 0)
      {
        imageStore(imageAtlas_, texelCoord, texValue);
      }
    }
  }
}