/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#version 450

#include "ImageOffset.comp"
#include "GridConstants.comp"

const bool SKIP_PARTICLES = false;

layout(set = 0, binding = 0, rgba16f) uniform image3D imageAtlas_;

layout(set = 0, binding = 1) uniform cbData
{
  vec4 textureValue;
  float texelSize;
  vec3 PADDING;
} cb_;

struct ParticleData
{
  vec3 gridPos;
  float radiusSquare;
};

layout(set = 0, binding = 2) buffer perParticleBuffer
{
  ParticleData data[];
} particles_;


struct NodeData
{
  vec3 gridOffset;  
  int particleCount;
  int particleOffset;
  uint imageOffset;
  vec2 PADDING;
};

layout(set = 0, binding = 3) buffer perNodeBuffer
{
  NodeData data[];
} nodes_;

layout(set = 0, binding = 4) buffer nodeParticleIndiceBuffer
{
  int data[];
} particleIndices_;


//Loop over all nodes and check which texels are covered by the particles per node
layout(local_size_x = IMAGE_RESOLUTION, local_size_y = IMAGE_RESOLUTION, local_size_z = 1) in;
void main()
{
  const int nodeIndex = int(gl_WorkGroupID.x);
  const NodeData currNode = nodes_.data[nodeIndex];
  
  for(int z = 0; z < IMAGE_RESOLUTION; ++z)
  {
    int particleCount = 0;
    const ivec3 index = ivec3(gl_LocalInvocationID.x, gl_LocalInvocationID.y, z);
    const vec3 gridPos = currNode.gridOffset + cb_.texelSize * index; 

    const ivec3 texelCoord = UnpackImageOffset_I(currNode.imageOffset) * IMAGE_RESOLUTION + index; 
    vec4 texValue = imageLoad(imageAtlas_, texelCoord);
    //For each particle check if the texel position in grid space is inside the particle radius
    for(int i = 0; i < currNode.particleCount; ++i)    
    {
      const ParticleData particle = particles_.data[particleIndices_.data[i + currNode.particleOffset]];
      const vec3 distanceVector = gridPos - particle.gridPos;
      if(dot(distanceVector, distanceVector) < particle.radiusSquare)
      {
        texValue += cb_.textureValue;
        particleCount++;
      }      
    }
    
    if(particleCount > 0)
    {
      //texValue.z /= particleCount;
      imageStore(imageAtlas_, texelCoord, texValue);
    }
  }
}