/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef RAYMARCHING_H
#define RAYMARCHING_H

#ifdef CPU_DEBUG
#define RESOURCES_H
#include "DebugData.h"
#include "HelperFunctions.h"
using namespace DebugData;
#endif

#include "BruteForce.comp"

const bool DEBUG_STORE_IMAGE_ATLAS = true;
const int DEBUG_IMAGE_ATLAS_SLICE = 9;
const int DEBUG_IMAGE_ATLAS_SCALE = 10;

struct Ray {
	vec3 origin;
	float maxLength;
	vec3 direction;
};

vec4 ImageToViewport(ivec2 imagePos) {
	vec2 imageTexCoord = vec2(imagePos) / vec2(raymarchData_.screenSize);
	vec4 viewPortPos = vec4((imageTexCoord.x * 2.0 - 1.0), ((1.0 - imageTexCoord.y) * 2 - 1) * -1, 0.0, 1.0);
	return viewPortPos;
}

vec3 ViewportToWorld(vec4 viewPortPos) {
	vec4 worldPosition = raymarchData_.viewPortToWorld * viewPortPos;
	worldPosition /= worldPosition.w;
	return vec3(worldPosition);
}

Ray CreateRay(vec3 start, vec3 end) {
	Ray ray;
	ray.direction = end - start;
	ray.maxLength = length(ray.direction);
	ray.direction /= ray.maxLength;
	ray.origin = start;
	return ray;
}

//Directly load the textureAtlas_ values for debugging
vec4 LoadImage(ivec2 imagePos)
{
  return texelFetch(textureAtlas_, ivec3(imagePos / DEBUG_IMAGE_ATLAS_SCALE, DEBUG_IMAGE_ATLAS_SLICE), 0);
}

void Raymarching(uvec3 invocationID)
{
  const ivec2 imagePos = ivec2(invocationID);
  //skip if image pos is outside of screen
  if(imagePos.x > raymarchData_.screenSize.x || imagePos.y > raymarchData_.screenSize.y)
  {
    return;
  }
  
  const float depth = 1.0f;//TODO imageLoad(depthImage_, imagePos).r;
  const vec4 startViewPort = ImageToViewport(imagePos);
  const vec4 endViewPort = startViewPort + vec4(0.0f, 0.0f, depth, 0.0f);

  const vec3 worldNear = ViewportToWorld(startViewPort);
  const vec3 worldEnd = ViewportToWorld(endViewPort);

  const Ray worldRay = CreateRay( worldNear, worldEnd);
  //move ray into grid space [0, gridSize]
  const vec3 gridOrigin = worldRay.origin - raymarchData_.gridMinPosition;
  const float jitteringOffset = 0.0f;//TODO Jittering(imagePos);
  
  const vec4 raymarchingResult = Raymarching_BruteForce(gridOrigin, worldRay.direction,
    worldRay.maxLength);
  imageStore(raymarchingResults_, imagePos, raymarchingResult);
  
  if(DEBUG_STORE_IMAGE_ATLAS)
  {
    const vec4 imageData = LoadImage(imagePos);
    imageStore(raymarchingResults_, imagePos, imageData);  
  }
}

#endif