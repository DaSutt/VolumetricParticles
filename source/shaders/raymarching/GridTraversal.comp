/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#ifndef GRIDTRAVERSAL_H
#define GRIDTRAVERSAL_H

#include "Resources.comp"
#include "ImageOffset.comp"
#include "GridConstants.comp"

const int MAX_LEVELS = 3;

struct GridStatus
{
  //vec4(scattering, extinction, phase g, unused)
  vec4 accumTexValue;   
  //for testing:
  int currentLevel;
};

struct SampleData
{
  //scattering, extinction, phase g
  vec3 accumTexValue; 
  //Number of levels with a positive scattering coefficient  
  //Used for averaging the accumulated phase function value
  int phaseCount;       
};

//Returns the image offset in texels inside the image atlas
vec3 GetImageOffset(const int nodeIndex, const bool mipMapping)
{
  uint imageOffset = nodeInfos_.data[nodeIndex].imageOffset;
  //Set image offset to mipmap if node has one
  imageOffset = (mipMapping && (imageOffset & (1 << IMAGE_MIPMAP_BIT)) == 1) ?
    nodeInfos_.data[nodeIndex].imageOffsetMipMap : imageOffset;
  return UnpackImageOffset(imageOffset);
}

//Calculates the texture coordinate inside of the image atlas for the current node
vec3 AtlasTextureCoordinate(const vec3 gridSpacePos, const int nodeIndex, const int level, bool mipmapping)
{
  //Position of the node in the range [0,1]
  const vec3 nodeSpacePos = fract(gridSpacePos / levelData_.data[level].gridCellSize);
  //Texture coordinate of the node within the range [halfTexel, halfTexel + nodeTexelSize]
  //The half size is added to have correct interpolation inside the texture atlas
  const vec3 texCoord = nodeSpacePos * raymarchData_.nodeTexelSize + 
    raymarchData_.texelHalfSize;  
  
  const vec3 imageOffset = GetImageOffset(nodeIndex, mipmapping);
  return texCoord + imageOffset * raymarchData_.atlasSideLength_Reciprocal;
}

//Combine the already accumulated texture values of multiple levels with
//the texture value at the current level
SampleData Accumulate(SampleData sampleData, vec4 newTexValue)
{
  //Add scattering and extinction
  #ifdef CPU_DEBUG
	sampleData.accumTexValue += vec3(newTexValue.x, newTexValue.y, 0.0f);
  #else
	sampleData.accumTexValue.xy += newTexValue.xy;
  #endif
  //Only accumulate the phase function for participating media with scattering
  const bool useScattering = newTexValue.x > 0.0f;
  sampleData.accumTexValue.z += useScattering ? newTexValue.z : 0.0f;
  sampleData.phaseCount += useScattering ? 1 : 0;
  return sampleData;
}

float AveragePhase(float accumPhase, int phaseCount)
{
  return accumPhase / float(phaseCount);
}

//Calculates the 1D bitindex from the node grid position
//Returns: ivec2(
//  index into the active bits array, 
//  index of the bit inside of the array element)
ivec2 CalcBitIndex(const vec3 gridPos, const int parentNodeIndex) {
	const int bitIndex = int((gridPos.z * NODE_RESOLUTION + gridPos.y) 
    * NODE_RESOLUTION + gridPos.x);
  return ivec2(
    bitIndex / 32 + parentNodeIndex * 128,
    bitIndex % 32);
}

//Sample the grid at the position for a certain level
//Accumulates this value with the already sampled data
SampleData SampleGrid(SampleData sampleData, vec3 gridSpacePos, 
  int nodeIndex, int level, bool mipmapping)
{
  const vec3 texCoord = AtlasTextureCoordinate(gridSpacePos, nodeIndex, level, mipmapping);
  const vec4 texValue = texture(textureAtlas_, texCoord);
  
  sampleData = Accumulate(sampleData, texValue);
	return sampleData;
}

//Calculate the child node position inside the parent node
ivec3 CalcGridNodePos(const vec3 gridSpacePos, const vec3 gridOffset, const int parentLevel)
{
  return ivec3((gridSpacePos - gridOffset) / levelData_.data[parentLevel].childCellSize);
}

bool BitActive(const ivec2 bitIndexOffset)
{
  return bool((activeBits_.data[bitIndexOffset.x] >> bitIndexOffset.y) & 1);
}

//BUG: if the uint variable is constant compiling the compute pipeline failes
int BitCounting(const int position, uint bits) {
  uint pos = uint(position);
  uint value = bits & ((1 << pos) - 1);	//mask all higher bits
  uint count = 0;

  value = value - ((value >> 1) & 0x55555555);
	value = (value & 0x33333333) + ((value >> 2) & 0x33333333);
  count = ((value + (value >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;
  return int(count);
}

//Use bit counting on the active child bit to
//lookup the index for this child inside the node array
int GetChildNodeIndex(const ivec2 bitIndexOffset, const int level, const int parentNodeIndex)
{
  const int bitCount = bitCounts_.data[bitIndexOffset.x] +
    BitCounting(bitIndexOffset.y, activeBits_.data[bitIndexOffset.x]);
  const int childIndex = bitCount + nodeInfos_.data[parentNodeIndex].childOffset;
  return childIndices_.indices[childIndex];
}

//Traverse all available grid levels starting at the root node at the grid space position 
//Accumulate the volumetric coefficients
GridStatus TraverseGrid(const vec3 gridSpacePos, int maxLevel, float mipMapWeight)
{
  GridStatus status;
  status.accumTexValue = vec4(0.0);
  
  int parentNodeIndex = 0;
  vec3 gridOffset = vec3(0.0f);
  SampleData sampleData;
  sampleData.accumTexValue = vec3(0.0f);

  //Sample on the root level
  bool mipMapping = mipMapWeight > 0.0f && maxLevel == 0;
  sampleData = SampleGrid(sampleData, gridSpacePos, parentNodeIndex, 0, mipMapping);
  status.currentLevel = 0;
  
  //Sample all available levels with higher resolution at the same position
  for(int level = 0; level < maxLevel; ++level)
  {
    const int childLevel = level + 1;
    //Use the grid space position to calculate the position of the child node
    const vec3 childNodePos = CalcGridNodePos(gridSpacePos, gridOffset, level);
    //Position inside the active bit array and index of the bit of the array element
    const ivec2 bitIndexOffset = CalcBitIndex(childNodePos, parentNodeIndex);    
    
    if(!BitActive(bitIndexOffset))
    {
      //Stop traversal if at this position no active child node exists
      break;
    }
    
    //Retrieve the child node index which will be the next parent node
    parentNodeIndex = GetChildNodeIndex(bitIndexOffset, childLevel, parentNodeIndex);
    //Store the world space offset of this node
    gridOffset = levelData_.data[level].childCellSize * vec3(childNodePos);
    
    mipMapping = mipMapWeight > 0.0f && childLevel == maxLevel;
    sampleData = SampleGrid(sampleData, gridSpacePos, parentNodeIndex, childLevel, mipMapping);
    status.currentLevel = childLevel;
  }
  
  sampleData.accumTexValue.z = AveragePhase(sampleData.accumTexValue.z, sampleData.phaseCount);
  status.accumTexValue = vec4(sampleData.accumTexValue, 0.0f);
  return status;
}

#endif