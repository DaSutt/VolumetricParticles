#version 450

//
// Description : Array and textureless GLSL 2D/3D/4D simplex
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
//

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  {
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i);
  vec4 p = permute( permute( permute(
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                dot(p2,x2), dot(p3,x3) ) );
  }

/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
  
const int CELL_RESOLUTION = 16;
const int IMAGE_RESOLUTION = CELL_RESOLUTION + 1;
const bool FILL_DEBUG_TEXTURE = true;
//Used to fill only the debug nodes with uniform data
const bool DEBUG_FILLING = false;

const uint IMAGE_BIT_OFFSETS[3] = {22, 12, 2};
const uint IMAGE_BIT_MASKS[2] = { 0x3fffff, 0xfff };

layout(set = 0, binding = 0, rgba16f) uniform image3D imageAtlas_;

layout(set = 0, binding = 1) uniform cbData
{
  float scattering;
  float absorption;
  float phaseG;
  float cellFraction;
  int edgeTexelY;
  float texelWorldSize;
  float noiseScale;
} cb_;

struct BufferElement
{
  vec3 worldOffset;
  uint imageOffset;
};

layout(set = 0, binding = 2) buffer PerCellBuffer
{
  BufferElement data[];
} perCell_;

layout(set = 0, binding = 3, r32f) uniform image3D debugTexture_;

void FillDebugTexture(vec3 worldTexelPosition, float density)
{
  //Transform from world space [0,512] to texture space [0,272]
  ivec3 texelCoord = ivec3(worldTexelPosition / cb_.texelWorldSize);
  //Remove y offset of world texelCoord to be in [0,IMAGE_RESOLUTION]
  texelCoord.y %= IMAGE_RESOLUTION;
  texelCoord.y = IMAGE_RESOLUTION - texelCoord.y;
  
  imageStore(debugTexture_, texelCoord, vec4(density));
}

const vec3 debugNodes[5] = 
{
  vec3(257, 225, 257),
  vec3(289, 225, 257),
  vec3(321, 225, 257),
  vec3(353, 225, 257),
  vec3(385, 225, 257)
};

bool DebugNode(vec3 worldOffset)
{
  for(int i = 0; i < 5; ++i)
  {
    if(worldOffset == debugNodes[i])
      return true;
  }
  return false;
}

ivec3 UnpackImageOffset(uint imageOffset)
{
  return ivec3(
    imageOffset >> IMAGE_BIT_OFFSETS[0],
    (imageOffset & IMAGE_BIT_MASKS[0]) >> IMAGE_BIT_OFFSETS[1],
    (imageOffset & IMAGE_BIT_MASKS[1]) >> IMAGE_BIT_OFFSETS[2]);
}

layout(local_size_x = IMAGE_RESOLUTION, local_size_y = IMAGE_RESOLUTION, local_size_z = 1) in;
void main()
{
  const int bufferOffset = int(gl_WorkGroupID.x);
  BufferElement curr = perCell_.data[bufferOffset];
  
  const vec4 fogValue = vec4(cb_.scattering, cb_.absorption, cb_.phaseG, 0.0);
  
  const ivec3 imageOffset = UnpackImageOffset(curr.imageOffset);
  bool edgeValue = true;
  for(int y = cb_.edgeTexelY - 1; y < IMAGE_RESOLUTION; ++y)
  {
    const ivec3 offset = ivec3(gl_LocalInvocationID.x, y, gl_LocalInvocationID.y);
    const ivec3 texelPosition = imageOffset + offset;
    
    const vec3 worldTexelPosition = curr.worldOffset + offset * cb_.texelWorldSize;
    const float density = (snoise(worldTexelPosition * cb_.noiseScale) + 1.0f) * 0.5f;
    
    vec4 currValue = density * fogValue;
    currValue = edgeValue ? currValue * cb_.cellFraction : currValue;
    imageStore(imageAtlas_, texelPosition, currValue);
    
    edgeValue = false;
  }
}