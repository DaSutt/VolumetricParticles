/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#version 450
#include "SimplexNoise.comp"
#include "GridConstants.comp"
#include "ImageOffset.comp"

//True if the debug texture for PBRT is filled
const bool FILL_DEBUG_TEXTURE = false;
//Used to fill only the debug nodes with uniform data
const bool DEBUG_FILLING = false;

layout(set = 0, binding = 0, rgba16f) uniform image3D imageAtlas_;
layout(set = 0, binding = 1) uniform cbData
{
  float scattering;
  float absorption;
  float phaseG;
  
  float texelWorldSize;
	float noiseScale;
	float cellFraction;		//amount that the edge texel is covered
	int edgeTexelY;				//texel at which the height fog stops
} cb_;

struct BufferElement
{
  vec3 worldOffset;
  uint imageOffset;
};

layout(set = 0, binding = 2) buffer PerCellBuffer
{
  BufferElement data[];
} perCell_;

//Debug texture for PBRT covering the whole ground fog in world space
layout(set = 0, binding = 3, r32f) uniform image3D debugTexture_;

void FillDebugTexture(vec3 worldTexelPosition, float density)
{
  //Transform from world space [0,512] to texture space [0,272]
  ivec3 texelCoord = ivec3(worldTexelPosition / cb_.texelWorldSize);
  //Remove y offset of world texelCoord to be in [0,IMAGE_RESOLUTION]
  texelCoord.y %= IMAGE_RESOLUTION;
  texelCoord.y = IMAGE_RESOLUTION - texelCoord.y;
  
  imageStore(debugTexture_, texelCoord, vec4(density));
}

const vec3 debugNodes[5] = 
{
  vec3(257, 225, 257),
  vec3(289, 225, 257),
  vec3(321, 225, 257),
  vec3(353, 225, 257),
  vec3(385, 225, 257)
};

bool DebugNode(vec3 worldOffset)
{
  for(int i = 0; i < 5; ++i)
  {
    if(worldOffset == debugNodes[i])
      return true;
  }
  return false;
}

//Fill one ground fog node based on its world space position with volumetric data
//Based on 3D noise the volumetric values are multiplied by the density
layout(local_size_x = IMAGE_RESOLUTION, local_size_y = IMAGE_RESOLUTION, local_size_z = 1) in;
void main()
{
  const int bufferOffset = int(gl_WorkGroupID.x);
  BufferElement curr = perCell_.data[bufferOffset];
  
  const vec4 fogValue = vec4(cb_.scattering, cb_.absorption, 0.0, 0.0);
  const ivec3 imageOffset = UnpackImageOffset_I(curr.imageOffset) * IMAGE_RESOLUTION;
  
  bool edgeValue = true;
  for(int y = cb_.edgeTexelY; y < IMAGE_RESOLUTION; ++y)
  {
    const ivec3 offset = ivec3(gl_LocalInvocationID.x, y, gl_LocalInvocationID.y);
    const ivec3 texelPosition = imageOffset + offset;
    
    imageStore(imageAtlas_, texelPosition, vec4(1,0,0,0));
    
    //Calculate density based on world space position in the range [0,1]
    const vec3 worldTexelPosition = curr.worldOffset + offset * cb_.texelWorldSize;
    const float density = (snoise(worldTexelPosition * cb_.noiseScale) + 1.0f) * 0.5f;
  
    vec4 currValue = density * fogValue;
    //Phase function parameter is not changed by the density
    currValue.z = cb_.phaseG;
    
    //currValue = vec4(worldTexelPosition / 512.0f, 0.0f);
    currValue = edgeValue ? currValue * cb_.cellFraction : currValue;
    imageStore(imageAtlas_, texelPosition, currValue);
    edgeValue = false;
  }
}