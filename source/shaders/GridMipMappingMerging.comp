/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#version 450

#include "ImageOffset.comp"
#include "GridConstants.comp"

struct ImageOffsets
{
  uint imageAtlas;
  uint imageAtlas_mipmap;
  uint mipmap;
};


layout(set = 0, binding = 0, rgba16f) uniform image3D imageAtlas_;
layout(set = 0, binding = 1) uniform sampler3D mipMapAtlas_;
layout(set = 0, binding = 2) uniform ConstantBuffer
{
  vec3 UNUSED;
  float texelSizeMipmap;
} cb_;
layout(set = 0, binding = 3) buffer ImageOffsetBuffer
{
  ImageOffsets data[];
} imageOffsets_;
layout(push_constant) uniform perLevelConstant
{
  int offset;
} perLevel_;

//Sample the mipmapping volume texture and combine it with the original texture
//Store the results inside the imageAtlas
layout(local_size_x = IMAGE_RESOLUTION, local_size_y = IMAGE_RESOLUTION, local_size_z = 1) in;
void main()
{
  const int index = int(gl_WorkGroupID.x);
  const ImageOffsets offsets = imageOffsets_.data[index + perLevel_.offset];
  
  const ivec3 imageOffset = UnpackImageOffset_I(offsets.imageAtlas) * IMAGE_RESOLUTION;
  const ivec3 mipmapOffset = UnpackImageOffset_I(offsets.imageAtlas_mipmap) * IMAGE_RESOLUTION;
  const ivec3 mipMapSourceImageOffset = UnpackImageOffset_I(offsets.mipmap);
  //
  for(int y = 0; y < IMAGE_RESOLUTION; ++y)
  {
    const ivec3 offset = ivec3(gl_LocalInvocationID.x, y, gl_LocalInvocationID.y);
    const ivec3 mipMapTexel = mipmapOffset + offset;
    const ivec3 mipMapSourceTexel = mipMapSourceImageOffset + offset;
    
    const vec4 imageValue = imageLoad(imageAtlas_, imageOffset + offset);
    const vec4 mipMapValue = texture(mipMapAtlas_, (mipMapSourceTexel) 
      * cb_.texelSizeMipmap); 
    //vec4 mipMapValue = imageValue * 0.5;
    imageStore(imageAtlas_, mipMapTexel, mipMapValue);
  }
}