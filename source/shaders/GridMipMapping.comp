/*
MIT License

Copyright(c) 2017 Daniel Suttor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

#version 450

#include "ImageOffset.comp"

const int THREAD_COUNT = 4;
const int TOTAL_THREADS = THREAD_COUNT * THREAD_COUNT * THREAD_COUNT;
const int SAMPLE_COUNT = 8;

struct ChildNodeData
{
  uint imageOffset;
  uint parentTexel;
};

layout(set = 0, binding = 0) uniform sampler3D textureAtlas_;
layout(set = 0, binding = 1) uniform cbData
{
  float atlasSideLength_Reciprocal;
  float texelSize;
  float texelSize_Half;
  float UNUSED;
} cb_;
layout(set = 0, binding = 2) buffer childNodeBuffer
{
  ChildNodeData data[];
} childNodes_;

layout(set = 0, binding = 3, rgba16f) uniform image3D mipMapAtlas_;

layout(push_constant) uniform PerLevelPushConstant
{
  int startOffset;
} perLevel_;

shared vec4 sharedMemory[TOTAL_THREADS];

int CalcIndex(ivec3 id, int resolution)
{
  return (id.z * resolution + id.y) * resolution + id.x;
}

//Calculate the sample offset in texels
vec3 CalcSampleOffset(int sampleIndex)
{
  vec3 imageOffset;
  imageOffset.x = sampleIndex % 2;
  imageOffset.y = (sampleIndex / 2) % 2;
  imageOffset.z = sampleIndex / 4;
  return imageOffset; // divide by image atlas size and resolution;
}

//Averages one node and stores the result at the texel of the larger mip map image atlas
layout(local_size_x = THREAD_COUNT, local_size_y = THREAD_COUNT, local_size_z = THREAD_COUNT) in;
void main()
{
  const int nodeIndex = int(gl_WorkGroupID.x) + perLevel_.startOffset;
  const ChildNodeData nodeData = childNodes_.data[nodeIndex];
  
  //Offset in the range [0,1] inside the image atlas, moved by texelSize_Half to sample between texels
  const vec3 childImageOffset = UnpackImageOffset(nodeData.imageOffset) 
    * cb_.atlasSideLength_Reciprocal + cb_.texelSize_Half;
  const ivec3 threadID = ivec3(gl_LocalInvocationID);
  //1D index of thread
  const int threadIndex = CalcIndex(threadID, THREAD_COUNT);
  
  //Offset in texels for each thread
  const vec3 threadOffset = threadID * 2.0;
  vec4 sampledAverage = vec4(0);
  
  //Sample 2 * 2 * 2 texels and average them
  //TODO unroll
  for(int i = 0; i < SAMPLE_COUNT; ++i)
  {
    //Offset in image atlas range [0,1]
    vec3 texelOffset = (CalcSampleOffset(i) + threadOffset) * cb_.texelSize;
    vec3 samplePos = texelOffset + childImageOffset;
    sampledAverage += texture(textureAtlas_, samplePos);
  }
  
  sampledAverage /= float(SAMPLE_COUNT);
  sharedMemory[threadIndex] = sampledAverage;
  
  memoryBarrierShared();
  
  //TODO Unroll based on total threads
  //parallel reducing of values
  for(int size = TOTAL_THREADS / 2; size > 0; size >>= 1)
  {
    if(threadIndex < size)
    {
      sharedMemory[threadIndex] += sharedMemory[threadIndex + size];
    }
    
    memoryBarrierShared();
  }
  
  if(threadIndex == 0)
  {
    vec4 finalValue = sharedMemory[0] / float(TOTAL_THREADS);
    const ivec3 parentTexel = UnpackImageOffset_I(nodeData.parentTexel);
    imageStore(mipMapAtlas_, parentTexel, finalValue);  
  }
}